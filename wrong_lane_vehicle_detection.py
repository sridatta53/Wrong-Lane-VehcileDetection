# -*- coding: utf-8 -*-
"""Wrong lane vehicle detection

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CbZ9fVl2HlISuT2mtKKlHNCbeeH7V1h1
"""

from tensorflow import keras

base_model = keras.applications.VGG16(
    weights='imagenet',  # Load weights pre-trained on ImageNet.
    input_shape=(224, 224, 3),
    include_top=False)

base_model.summary()

base_model.trainable = False

inputs = keras.Input(shape=(224, 224, 3))
# Separately from setting trainable on the model, we set training to False
x = base_model(inputs, training=False)
x = keras.layers.GlobalAveragePooling2D()(x)
# A Dense classifier with a single unit (binary classification)
outputs = keras.layers.Dense(1)(x)
model = keras.Model(inputs, outputs)

model.summary()

model.compile(loss=keras.losses.BinaryCrossentropy(from_logits=True), metrics=[keras.metrics.BinaryAccuracy()])

from tensorflow.keras.preprocessing.image import ImageDataGenerator
# create a data generator
datagen = ImageDataGenerator(
        samplewise_center=True,  # set each sample mean to 0
        rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180)
        zoom_range = 0.1, # Randomly zoom image
        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)
        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)
        horizontal_flip=True,  # randomly flip images
        vertical_flip=False) # we don't expect Bo to be upside-down so we will not flip vertically

from google.colab import drive
drive.mount('/content/drive')

# load and iterate training dataset
train_it = datagen.flow_from_directory('/content/drive/MyDrive/cars',
                                       target_size=(224, 224),
                                       color_mode='rgb',
                                       class_mode='binary',
                                       batch_size=8)
# load and iterate validation dataset
valid_it = datagen.flow_from_directory('/content/drive/MyDrive/cars_test',
                                      target_size=(224, 224),
                                      color_mode='rgb',
                                      class_mode='binary',
                                      batch_size=8)
labels=[]
labels.append(0)

print(labels)



model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
model.fit(train_it, steps_per_epoch=15, validation_data=valid_it, validation_steps=4, epochs=10)

import numpy as np
!pip install keras_applications
import warnings
from keras.models import Model
from keras.layers import Flatten
from keras.layers import Dense
from keras.layers import Input
from keras.layers import Conv2D
from keras.layers import MaxPooling2D
from keras.layers import GlobalMaxPooling2D
from keras.layers import GlobalAveragePooling2D
from keras.preprocessing import image
from tensorflow.python.keras.utils import layer_utils
from keras.utils import get_file
from keras import backend as X
from keras.applications.imagenet_utils import decode_predictions
from keras.applications.imagenet_utils import preprocess_input
from keras_applications.imagenet_utils import _obtain_input_shape

import tensorflow as tf

from matplotlib.pyplot import imread,imshow
from tensorflow.keras.utils import load_img, img_to_array
import keras
img_path='/content/drive/MyDrive/cars/front/101 - Copy - Copy.jpg'
img=keras.utils.load_img(img_path,target_size=(224,224))
x=keras.utils.img_to_array(img)
x=np.expand_dims(x,axis=0)
x=preprocess_input(x)
print(x.shape)
my_image=imread(img_path)
imshow(my_image)

model.predict(x)

!pip install pyyaml h5py

import os

import tensorflow as tf
from tensorflow import keras

print(tf.version.VERSION)

model.save("image_classification.keras")

import streamlit as st
import tensorflow as tf
from tensorflow.keras.applications.imagenet_utils import decode_predictions
import cv2
from PIL import Image, ImageOps
import numpy as np



# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# import tensorflow as tf
# from tensorflow.keras.applications.imagenet_utils import decode_predictions
# import cv2
# from PIL import Image, ImageOps
# import numpy as np
# 
# @st.cache(allow_output_mutation=True)
# def load_model():
#   model=tf.keras.models.load_model('/content/image_classification.keras')
#   return model
# with st.spinner('Model is being loaded..'):
#   model=load_model()
# 
# st.write("""
#          # Image Classification
#          please only upload images of jpg format
#          """
#          )
# 
# file = st.file_uploader("Upload the image to be classified U0001F447", type=["jpg", "png"])
# st.set_option('deprecation.showfileUploaderEncoding', False)
# 
# def upload_predict(upload_image, model):
# 
#         size = (224,224)
#         image = ImageOps.fit(upload_image, size, Image.ANTIALIAS)
#         image = np.asarray(image)
#         img = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
#         img_resize = cv2.resize(img, dsize=(224, 224),interpolation=cv2.INTER_CUBIC)
# 
#         img_reshape = img_resize[np.newaxis,...]
# 
#         prediction = model.predict(img_reshape)
# 
# 
#         return prediction
# if file is None:
#     st.text("Please upload an image file")
# else:
#     image = Image.open(file)
#     st.image(image, use_column_width=True)
#     predictions = upload_predict(image, model)
#     if(predictions[0]>0):
#       st.write("its the rear view of the car")
#       st.write("if u think the result is incorrect try using a better resolution image")
#     else:
#       st.write("its front view of a car")
#       st.write("if u think the result is incorrect try using a better resolution image")
#

! streamlit run app.py & npx localtunnel --port 8501

!npx localtunnel --port 8501

!curl https://loca.lt/mytunnelpassword